service: serverless-template

provider:
  name: aws
  runtime: nodejs8.10
  memorySize: 512

  environment:
    DATA_TABLE: ${self:service}-${env:STAGE}-accounts
    API_ROOT:
      Fn::Join:
        - ""
        - - "https://"
          - Ref: "ApiGatewayRestApi"
          - ".execute-api.#{AWS::Region}.amazonaws.com/${env:STAGE}"

  iamRoleStatements:
    - Effect: Allow
      Action:
        - "dynamodb:*"
      Resource:
        - arn:aws:dynamodb:#{AWS::Region}:#{AWS::AccountId}:table/${self:service}-main-${env:STAGE}
        - arn:aws:dynamodb:#{AWS::Region}:#{AWS::AccountId}:table/${self:service}-main-${env:STAGE}/*

plugins:
  - serverless-pseudo-parameters
  - serverless-plugin-warmup
  - serverless-openapi-documentation
  - serverless-dynamodb-local
  - serverless-offline

package:
  exclude:
    - test/**

custom:
  warmup:
    enabled: true
  serverless-offline:
    port: 3001
  cors:
    origin: '*'
    headers:
      - Content-Type
      - X-Amz-Date
      - Authorization
      - Accept-Enconding
      - X-Api-Key
      - X-Amz-Security-Token
      - X-Amz-User-Agent
      - Access-Control-Allow-Origin
    allowCredentials: false
  dynamodb:
    stages:
      - local
    start:
      port: 8000
      inMemory: true
      heapInitial: 200m
      heapMax: 1g
      migrate: true
      seed: true
      convertEmptyValues: true
  documentation: ${file(serverless.doc.yml):documentation}

resources:
  Resources:
    accountsTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:service}-main-${env:STAGE}
        AttributeDefinitions:
          - AttributeName: id
            AttributeType: N
        KeySchema:
          - AttributeName: id
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 5
          WriteCapacityUnits: 5

functions:
  swagger:
    handler: app/handler.swagger
    events:
      - http:
          path: swagger-ui
          method: get
      - http:
          path: /openapi.json
          method: get
          contentHandling: CONVERT_TO_BINARY
      - http:
          path: swagger-ui-bundle.js
          method: get
          contentHandling: CONVERT_TO_BINARY
      - http:
          path: swagger-ui-standalone-preset.js
          method: get
          contentHandling: CONVERT_TO_BINARY
      - http:
          path: swagger-ui.css
          method: get
          contentHandling: CONVERT_TO_BINARY

  get-accounts:
    handler: app/handler.getAccounts
    events:
      - http:
          path: accounts
          method: get
          cors: ${self:custom.cors}
          documentation: ${file(serverless.doc.yml):endpoints.get-accounts}

  get-account:
    handler: app/handler.getAccount
    events:
      - http:
          path: accounts/{id}
          method: get
          cors: ${self:custom.cors}
          documentation: ${file(serverless.doc.yml):endpoints.get-account}

  create-account:
    handler: app/handler.createAccount
    events:
      - http:
          path: create-account
          method: post
          cors: ${self:custom.cors}
          documentation: ${file(serverless.doc.yml):endpoints.create-account}

  get-active-trials:
    handler: app/handler.getActiveTrials
    events:
      - http:
          path: active-trials
          method: get
          cors: ${self:custom.cors}
          documentation: ${file(serverless.doc.yml):endpoints.get-active-trials}

  create-trial:
    handler: app/handler.createTrial
    events:
      - http:
          path: create-trial
          method: post
          cors: ${self:custom.cors}
          documentation: ${file(serverless.doc.yml):endpoints.create-trial}
